Why this branch?
-----------------
This is an augmented implementation of the cassandra-stress tool. No other classes are modified.
The cassandra-stress2 adds a mode to the original stress test where the load generator assumes
operations on the database have a predetermined schedule and measures their latency based on that
schedule. This is allows the load generator to correct for coordinated omission, producing
correct results for both response time and service time.

The new measurement code utilizes the HdrHistogram which offers a dynamic range histogram for
latency stats as well as loss less logging facilities for the histograms. These are put in place
to offer finer grained latency data over time. cassandra-stress2 can be used to produce detailed
interval histogram logs that can be later processed by various HdrHistogram compatible tools.
See example below for how to output such logs...

Both old(service time) and new(response time) measurement code are in place and this version allows
the recording of both for comparison. In latency summary reports, response time is used to
provide the primary "latency" output, with service time appearing in () following the reponse time.

Here are a couple of simple example commands that will produce response time and service time logs:
[With a prior write to populate n=5000000]:

read at 20K, 250 seconds (20K * 250 = 5M):
tools/bin/cassandra-stress read n=5000000 cl=ONE -pop dist=UNIFORM\(1..50000000\) -schema keyspace="keyspace1" -mode native cql3 -rate threads=64 limit=20000/s -log file=~/read20k.cs.log rtlog=read20k-rt.hlog stlog=read20k-st.hlog -node 10.31.6.73

read at 20K, 250 seconds (20K * 250 = 5M):
tools/bin/cassandra-stress mixed ratio\(write=1,read=3\) n=5000000 cl=ONE -pop dist=UNIFORM\(1..5000000\) -schema keyspace="keyspace1" -mode native cql3 -rate threads=64 limit=20000/s -log file=~/mixed20k.cs.log rtlog=mixed20k-rt.hlog stlog=mixed20k-st.hlog -node 10.31.6.73

Old README follows:
-----------------

Executive summary
-----------------

Cassandra is a partitioned row store.  Rows are organized into tables with a required primary key.

http://wiki.apache.org/cassandra/Partitioners[Partitioning] means that Cassandra can distribute your data across multiple machines in an application-transparent matter.  Cassandra will automatically repartition as machines are added and removed from the cluster.

http://wiki.apache.org/cassandra/DataModel[Row store] means that like relational databases, Cassandra organizes data by rows and columns.  The Cassandra Query Language (CQL) is a close relative of SQL.

For more information, see http://cassandra.apache.org/[the Apache Cassandra web site].

Requirements
------------
. Java >= 1.7 (OpenJDK and Oracle JVMS have been tested)
. Python 2.7 (for cqlsh)

Getting started
---------------

This short guide will walk you through getting a basic one node cluster up
and running, and demonstrate some simple reads and writes.

First, we'll unpack our archive:

  $ tar -zxvf apache-cassandra-$VERSION.tar.gz
  $ cd apache-cassandra-$VERSION

and create the log and data directories.  These correspond to the defaults from conf/ and may be adjusted to suit your own environment:

  $ sudo mkdir -p /var/log/cassandra
  $ sudo chown -R `whoami` /var/log/cassandra
  $ sudo mkdir -p /var/lib/cassandra
  $ sudo chown -R `whoami` /var/lib/cassandra

Finally, we start the server.  Running the startup script with the -f argument will cause
Cassandra to remain in the foreground and log to standard out; it can be stopped with ctrl-C.

  $ bin/cassandra -f

****
Note for Windows users: to install Cassandra as a service, download
http://commons.apache.org/daemon/procrun.html[Procrun], set the
PRUNSRV environment variable to the full path of prunsrv (e.g.,
C:\procrun\prunsrv.exe), and run "bin\cassandra.bat install".
Similarly, "uninstall" will remove the service.
****

Now let's try to read and write some data using the Cassandra Query Language:

  $ bin/cqlsh

The command line client is interactive so if everything worked you should
be sitting in front of a prompt:

----
Connected to Test Cluster at localhost:9160.
[cqlsh 2.2.0 | Cassandra 1.2.0 | CQL spec 3.0.0 | Thrift protocol 19.35.0]
Use HELP for help.
cqlsh> 
----

As the banner says, you can use 'help;' or '?' to see what CQL has to
offer, and 'quit;' or 'exit;' when you've had enough fun. But lets try
something slightly more interesting:

----
cqlsh> CREATE SCHEMA schema1 
       WITH replication = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };
cqlsh> USE schema1;
cqlsh:Schema1> CREATE TABLE users (
                 user_id varchar PRIMARY KEY,
                 first varchar,
                 last varchar,
                 age int
               );
cqlsh:Schema1> INSERT INTO users (user_id, first, last, age) 
               VALUES ('jsmith', 'John', 'Smith', 42);
cqlsh:Schema1> SELECT * FROM users;
 user_id | age | first | last
---------+-----+-------+-------
  jsmith |  42 |  john | smith
 cqlsh:Schema1> 
----

If your session looks similar to what's above, congrats, your single node
cluster is operational! 

For more on what commands are supported by CQL, see
https://github.com/apache/cassandra/blob/trunk/doc/cql3/CQL.textile[the CQL reference].  A
reasonable way to think of it is as, "SQL minus joins and subqueries, plus collections."

Wondering where to go from here? 

  * Getting started: http://wiki.apache.org/cassandra/GettingStarted
  * Join us in #cassandra on irc.freenode.net and ask questions
  * Subscribe to the Users mailing list by sending a mail to
    user-subscribe@cassandra.apache.org
  * Planet Cassandra aggregates Cassandra articles and news:
    http://planetcassandra.org/
